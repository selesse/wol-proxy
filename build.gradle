plugins {
    id 'java'
    id 'application'
    id 'org.hidetake.ssh' version '2.10.1'
}

repositories {
    jcenter()
}

dependencies {
    compile("org.slf4j:slf4j-api:1.7.30")
    compile("com.sparkjava:spark-core:2.8.0")
    compile("ch.qos.logback:logback-classic:1.2.3")
    implementation("com.google.guava:guava:28.1-jre")

    testImplementation("junit:junit:4.12")
}

application {
    mainClassName = "com.selesse.wol.App"
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.selesse.wol.App'
    }
    archiveFileName = 'wol.jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

def config = new ConfigSlurper().parse(file("gradle/config.gradle").text)
if (file("gradle/config.prod.gradle").exists()) {
    def prodConfig = new ConfigSlurper().parse(file("gradle/config.prod.gradle").text)
    config = config.merge(prodConfig)
}

task deployPi {
    doLast {
        file("conf/wol-proxy-client.service").delete()
        ant.copy(file: "conf/wol-proxy-client.service.template", tofile: "conf/wol-proxy-client.service") {
            filterset() {
                filter(token: 'MAC_ADDRESS', value: config.configuration.wol.macAddress)
                filter(token: 'SERVER_HOST', value: config.deploy.proxy.host)
                filter(token: 'SERVER_PORT', value: config.configuration.server.serverPort)
            }
        }
        ssh.run {
            session(config.deploy.pi) {
                put from: "${project.rootDir}/conf/wol-proxy-client.service", into: '/etc/systemd/system/wol-proxy-client.service'
                put from: fatJar.outputs.files.singleFile, into: '/opt/wol-proxy/'
                execute "sudo /bin/systemctl restart wol-proxy-client"
            }
        }
    }
}

task deployProxy {
    doLast {
        file("conf/wol-proxy.service").delete()
        ant.copy(file: "conf/wol-proxy.service.template", tofile: "conf/wol-proxy.service") {
            filterset() {
                filter(token: 'SERVER_PORT', value: config.configuration.server.serverPort)
                filter(token: 'PROXY_PORT', value: config.configuration.server.proxyPort)
            }
        }
        ssh.run {
            session(config.deploy.proxy) {
                put from: fatJar.outputs.files.singleFile, into: '/opt/wol-proxy/'
                execute "sudo /bin/systemctl restart wol-proxy"
            }
        }
    }
}

task deploy {

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

assemble.dependsOn fatJar
deployProxy.dependsOn fatJar
deployPi.dependsOn deployProxy
deploy.dependsOn deployPi
