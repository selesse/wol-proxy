plugins {
    id 'java'
    id 'application'
    id 'org.hidetake.ssh' version '2.10.1'
}

repositories {
    jcenter()
}

dependencies {
    compile("org.slf4j:slf4j-api:1.7.30")
    compile("com.sparkjava:spark-core:2.8.0")
    compile("ch.qos.logback:logback-classic:1.2.3")
    implementation("com.google.guava:guava:28.1-jre")

    testImplementation("junit:junit:4.12")
}

application {
    mainClassName = "com.selesse.wol.App"
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.selesse.wol.App'
    }
    archiveFileName = 'wol.jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

remotes {
    raspberryPi {
        host = 'raspberrypi.local'
        user = 'pi'
        identity = file(System.getProperty("user.home") + "/.ssh/id_rsa")
    }
    raspberryPi2 {
        host = 'raspberrypi2.local'
        user = 'pi'
        identity = file(System.getProperty("user.home") + "/.ssh/id_rsa")
    }
    proxyServer {
        host = 'example.com'
        user = 'alex'
        identity = file(System.getProperty("user.home") + "/.ssh/id_rsa")
    }
}

task deployPi {
    doLast {
        ssh.run {
            session(remotes.raspberryPi2) {
                put from: fatJar.outputs.files.singleFile, into: '/opt/wol-proxy/'
                execute "sudo /bin/systemctl restart wol-proxy-client"
            }
        }
    }
}

task deployProxy {
    doLast {
        ssh.run {
            session(remotes.proxyServer) {
                put from: fatJar.outputs.files.singleFile, into: '/opt/wol-proxy/'
                execute "sudo /bin/systemctl restart wol-proxy"
            }
        }
    }
}

task deploy {

}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

assemble.dependsOn fatJar
deployProxy.dependsOn fatJar
deployPi.dependsOn deployProxy
deploy.dependsOn deployPi
